import { DataSource, Repository } from 'typeorm';
import { <%- className %>, <%- className %>View } from '@mdtx/entities';
import { Test } from '@nestjs/testing';
import { <%- className %>Module } from './<%- fileName %>.module';
import { TypeOrmModule } from '@nestjs/typeorm';
describe('<%- className %>Module', () => {
  let ds: DataSource;

  let <%- propertyName %>Repo: Repository<<%- className %>>;
  let <%- propertyName %>ViewRepo: Repository<<%- className %>View>;

  beforeAll(async () => {
    Test.createTestingModule({
      imports: [
        TypeOrmModule.forRoot({
          type: 'better-sqlite3',
          database: 'tmp/database/<%- fileName %>-module.sqlite',
          autoLoadEntities: true,
          synchronize: true,
          dropSchema: true,
        }),
        <%- className %>Module,
      ],
    });
    ds = await new DataSource({
      type: 'better-sqlite3',
      database: 'tmp/database/<%- fileName %>-module.sqlite',
      entities: [<%- className %>, <%- className %>View],
      synchronize: true,
      dropSchema: true,
    }).initialize();

    <%- propertyName %>Repo = ds.getRepository(<%- className %>);
    <%- propertyName %>ViewRepo = ds.getRepository(<%- className %>View);
  });

  it('should initialize datasource', () => {
    expect(ds).toBeTruthy();
    expect(<%- propertyName %>Repo).toBeTruthy();
    expect(<%- propertyName %>ViewRepo).toBeTruthy();
  });

  it('should get data', async () => {
    expect(await <%- propertyName %>Repo.find()).toBeTruthy();
    expect(await <%- propertyName %>ViewRepo.find()).toBeTruthy();
  });

  afterAll(() => {
    ds.destroy();
  });
});
