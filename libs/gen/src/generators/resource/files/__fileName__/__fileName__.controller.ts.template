import {
  UnsetRelationDto,
  PaginatorDto,
  RestRouteBuilder,
  RelationDto,
} from '@mdtx/core';
import { Create<%- className %>Dto, <%- className %>, Update<%- className %>Dto } from '@mdtx/database';
import { <%- className %>Service } from './<%- fileName %>.service';

const R = RestRouteBuilder.get('<%- className %>');

@R.Controler()
export class <%- className %>Controller {
  constructor(protected readonly <%- propertyName %>Service: <%- className %>Service) {}

  @R.SaveOne()
  save(@R.Body() <%- propertyName %>: Create<%- className %>Dto) {
    return this.<%- propertyName %>Service.save(<%- propertyName %>);
  }

  @R.FindAll()
  findAll(@R.Query() paginator: PaginatorDto) {
    return this.<%- propertyName %>Service.findAll({ ...paginator });
  }

  @R.FindOneById()
  findOneById(@R.ParamID() id: number) {
    return this.<%- propertyName %>Service.findOneById(id);
  }

  @R.DeleteOne()
  deleteById(@R.ParamID() id: number) {
    return this.<%- propertyName %>Service.deleteById(id);
  }

  @R.UpdateOne()
  updateOneById(@R.ParamID() id: number, @R.Body() body: Update<%- className %>Dto) {
    return this.<%- propertyName %>Service.updateOneById(id, body);
  }

  @R.AddRelation()
  addRelationTo<%- className %>(@R.Param() relationDto: RelationDto<<%- className %>>) {
    return this.<%- propertyName %>Service.addRelation(relationDto);
  }

  @R.RemoveRelation()
  removeRelation(@R.Param() relationDto: RelationDto<<%- className %>>) {
    return this.<%- propertyName %>Service.removeRelation(relationDto);
  }

  @R.SetRelation()
  setRelation(@R.Param() relationDto: RelationDto<<%- className %>>) {
    return this.<%- propertyName %>Service.setRelation(relationDto);
  }

  @R.UnsetRelation()
  unsetRelation(@R.Param() relationDto: UnsetRelationDto<<%- className %>>) {
    return this.<%- propertyName %>Service.unsetRelation(relationDto);
  }
}
