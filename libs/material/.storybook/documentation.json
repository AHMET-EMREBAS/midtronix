{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ErrorStateMatcher",
            "id": "class-ErrorStateMatcher-9cf04395f19f34c2657d22ec1a887a2f88316f2a0b3becba4683b2d0db28861fb9dad6f4608c2c2a99fe0895b410dfddf48bdc618a1fcd92d50401ebd610e7db",
            "file": "libs/material/form/src/lib/common/error-state-matcher.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Provider } from '@angular/core';\r\nimport { AbstractControl, FormGroupDirective, NgForm } from '@angular/forms';\r\nimport { ErrorStateMatcher as __ErrorStateMatcher } from '@angular/material/core';\r\n\r\nexport class ErrorStateMatcher implements __ErrorStateMatcher {\r\n  isErrorState(\r\n    control: AbstractControl<any, any> | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    return (control?.dirty && control.touched && !control.valid) ?? false;\r\n  }\r\n}\r\n\r\nexport function provideErrorStateMatcher(): Provider {\r\n  return {\r\n    provide: __ErrorStateMatcher,\r\n    useClass: ErrorStateMatcher,\r\n  };\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl<any | any> | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl<any | any> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "__ErrorStateMatcher"
            ]
        }
    ],
    "directives": [
        {
            "name": "FullscreenDirective",
            "id": "directive-FullscreenDirective-aeb9dc66448250ed7656618a2cc7d62b518d131cb41a1f6b61c85c1abd1fc52ae61186d1e1803d5a10750888e7ef8896c734a704b6f1fb7bdb7c28d251f7a979",
            "file": "libs/material/core/src/lib/directive/fullscreen.directive.ts",
            "type": "directive",
            "description": "<p>When user clicks the button with the mdtxFullscreen directive, the screen for the provided element will be toggled.</p>\n",
            "rawdescription": "\n\nWhen user clicks the button with the mdtxFullscreen directive, the screen for the provided element will be toggled.\n",
            "sourceCode": "import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n/**\r\n * When user clicks the button with the mdtxFullscreen directive, the screen for the provided element will be toggled.\r\n */\r\n@Directive({\r\n  selector: '[mdtxFullscreen]',\r\n})\r\nexport class FullscreenDirective {\r\n  @HostListener('click')\r\n  clickHandler() {\r\n    this.ref.nativeElement.requestFullscreen();\r\n  }\r\n\r\n  constructor(protected readonly ref: ElementRef<HTMLButtonElement>) {}\r\n}\r\n",
            "selector": "[mdtxFullscreen]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef<HTMLButtonElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef<HTMLButtonElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "FullscreenComponent",
            "id": "component-FullscreenComponent-a9833b95a7439fdcb8e5332659459c23033e5b440d98238adc2d20b8a92739ef0ea05ec8af1dad61cc7533936775becd63f939a44d2e6202db434e2d54319022",
            "file": "libs/material/core/src/lib/directive/fullscreen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mdtx-fullscreen-component",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FullscreenDirective } from './fullscreen.directive';\r\n@Component({\r\n  selector: 'mdtx-fullscreen-component',\r\n  standalone: true,\r\n  imports: [],\r\n  template: ``,\r\n})\r\nexport class FullscreenComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-701d1a45012368ee94ebec0f43e467dd9758d8841959869b9b7424ac2c1edf7af54d8c78cd2d71ff606c34cfa9691bc2d45208eba62082b14fcb52a84999129d",
            "file": "libs/material/layout/src/lib/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mdtx-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'mdtx-layout',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './layout.component.html',\n  styleUrl: './layout.component.scss',\n})\nexport class LayoutComponent {}\n",
            "styleUrl": "./layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>layout works!</p>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-91c6593d35741b9a08b86016763d954f5adce83cf78483a3829e52be7d2bc80450db088cfb248ca111605f033e93aef2ef786c96e28a37d924f3548b988f475d",
            "file": "libs/material/table/src/lib/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mdtx-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'mdtx-table',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './table.component.html',\n  styleUrl: './table.component.scss',\n})\nexport class TableComponent {}\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>table works!</p>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "____material____",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "''"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fullscreen works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/layout works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/table works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FullscreenComponent>",
                "defaultValue": "{\n  component: FullscreenComponent,\n  title: 'FullscreenComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LayoutComponent>",
                "defaultValue": "{\n  component: LayoutComponent,\n  title: 'LayoutComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableComponent>",
                "defaultValue": "{\n  component: TableComponent,\n  title: 'TableComponent',\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            }
        ],
        "functions": [
            {
                "name": "createClassProvider",
                "file": "libs/material/core/src/lib/providers/create-provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Create a class provider, injector, and token function</p>\n",
                "args": [
                    {
                        "name": "tokenPrefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CreateProviderResult<Type<T>, Provider, InjectionToken<T>>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 202,
                            "end": 213,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "tokenPrefix"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 196,
                            "end": 201,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "tagName": {
                            "pos": 219,
                            "end": 226,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "createValueProvider",
                "file": "libs/material/core/src/lib/providers/create-provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Create a value provider, injector, and token function</p>\n",
                "args": [
                    {
                        "name": "tokenPrefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CreateProviderResult<T, Provider, InjectionToken<T>>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 730,
                            "end": 741,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "tokenPrefix"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 724,
                            "end": 729,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "tagName": {
                            "pos": 747,
                            "end": 754,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "provideErrorStateMatcher",
                "file": "libs/material/form/src/lib/common/error-state-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Provider"
            }
        ],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FullscreenComponent>",
                "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LayoutComponent>",
                "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableComponent>",
                "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/material/src/index.ts": [
                {
                    "name": "____material____",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "''"
                }
            ],
            "libs/material/core/src/lib/directive/fullscreen.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fullscreen works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FullscreenComponent>",
                    "defaultValue": "{\n  component: FullscreenComponent,\n  title: 'FullscreenComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/layout/src/lib/layout/layout.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/layout works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LayoutComponent>",
                    "defaultValue": "{\n  component: LayoutComponent,\n  title: 'LayoutComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/table/src/lib/table/table.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/table works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableComponent>",
                    "defaultValue": "{\n  component: TableComponent,\n  title: 'TableComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ]
        },
        "groupedFunctions": {
            "libs/material/core/src/lib/providers/create-provider.ts": [
                {
                    "name": "createClassProvider",
                    "file": "libs/material/core/src/lib/providers/create-provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Create a class provider, injector, and token function</p>\n",
                    "args": [
                        {
                            "name": "tokenPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CreateProviderResult<Type<T>, Provider, InjectionToken<T>>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 202,
                                "end": 213,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "tokenPrefix"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 196,
                                "end": 201,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 219,
                                "end": 226,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "createValueProvider",
                    "file": "libs/material/core/src/lib/providers/create-provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Create a value provider, injector, and token function</p>\n",
                    "args": [
                        {
                            "name": "tokenPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CreateProviderResult<T, Provider, InjectionToken<T>>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 730,
                                "end": 741,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "tokenPrefix"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 724,
                                "end": 729,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 747,
                                "end": 754,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "libs/material/form/src/lib/common/error-state-matcher.ts": [
                {
                    "name": "provideErrorStateMatcher",
                    "file": "libs/material/form/src/lib/common/error-state-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Provider"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/material/core/src/lib/directive/fullscreen.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FullscreenComponent>",
                    "file": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/layout/src/lib/layout/layout.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LayoutComponent>",
                    "file": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/material/table/src/lib/table/table.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableComponent>",
                    "file": "libs/material/table/src/lib/table/table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/core/src/lib/directive/fullscreen.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/core/src/lib/directive/fullscreen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullscreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/core/src/lib/directive/fullscreen.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FullscreenDirective",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "libs/material/core/src/lib/providers/create-provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createClassProvider",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/material/core/src/lib/providers/create-provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createValueProvider",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/material/form/src/lib/common/error-state-matcher.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/material/form/src/lib/common/error-state-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/layout/src/lib/layout/layout.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/layout/src/lib/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "____material____",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/table/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/table/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/table/src/lib/table/table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/table/src/lib/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}